# HUANCHUAN with Copilot  版本号：3.1.0

import xml.etree.ElementTree as ET
import os, re, sys, winreg, requests, threading

from bs4 import BeautifulSoup
from PySide6.QtCore import QTimer, QObject, Signal
from PySide6.QtGui import QPalette, QFont, Qt, QIcon
from PySide6.QtWidgets import QToolButton, QApplication, QWidget, QVBoxLayout, QPushButton, QHBoxLayout, QFrame, QTextBrowser, QDialog, QLabel, QStyle

# ===== 原有逻辑（不再改动） =====
names = {
    "pc_manager": "荣耀电脑管家",
    "honor_workstation": "荣耀超级工作台",
    "yoyo_assistant": "荣耀 YOYO 助理"
}

def get_local_version(xml_path):
    if os.path.exists(xml_path):
        try:
            tree = ET.parse(xml_path)
            root = tree.getroot()
            version_elem = root.find(".//version")
            if version_elem is not None:
                return version_elem.text.strip()
        except Exception as e:
            return f"读取版本号失败: {e}"
    return None

def get_registry_version(path, value_name):
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, path)
        value, _ = winreg.QueryValueEx(key, value_name)
        winreg.CloseKey(key)
        return value.strip()
    except Exception as e:
        return f"读取版本号失败: {e}"

installed_versions = {
    "pc_manager": get_local_version(r"C:\Program Files\HONOR\PCManager\config\product_adapter_version.xml"),
    "honor_workstation": get_registry_version(r"SOFTWARE\HONOR\Hihonornote", "HonorWorkStationVersion"),
    "yoyo_assistant": get_local_version(r"C:\Program Files\HONOR\HNMagicAI\config\product_adapter_version.xml")
}

pages = {
    "pc_manager": {
        "url": "https://www.honor.com/cn/tech/pc-manager/",
        "selector": ("p", "path")
    },
    "honor_workstation": {
        "url": "https://www.honor.com/cn/tech/honor-workstation/",
        "selector": ("div", "btn-text")
    },
    "yoyo_assistant": {
        "url": "https://www.honor.com/cn/tech/pc-yoyo-assistant-2/",
        "selector": ("p", "path")
    }
}

def version_tuple(v):
    return tuple(int(x) for x in v.strip().split(".") if x.isdigit())

def clean_version(v, remove_patch=True):
    v = v.replace("Version", "").replace("版本", "").strip()
    if remove_patch:
        v = re.sub(r"\(.*?\)", "", v).strip()
    return v

# ===== 工作线程通信对象（AI辅助生成添加，不改动） =====
class UiBridge(QObject):
    append_html = Signal(str)
    clear_text = Signal()
    finished = Signal()

# ===== 主窗口 =====
def resource_path(relative_path):
    """获取资源文件的绝对路径（兼容打包后）"""
    if hasattr(sys, "_MEIPASS"):  # PyInstaller 打包后的临时目录
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath(""), relative_path)

class UpdateChecker(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Update Checker for MagicBook")
        self.setFixedSize(350, 598)
        self.setFont(QFont("HO4OR Sans CN", 10))

        layout = QVBoxLayout(self)

        # 外层圆角框架包裹输出框
        frame = QFrame(self)
        frame.setStyleSheet("""
            QFrame {
                border: 1px solid palette(mid);
                border-radius: 10px;
                background-color: palette(base);
            }
        """)
        frame_layout = QVBoxLayout(frame)
        frame_layout.setContentsMargins(6, 6, 6, 6)

        # 改为 QTextBrowser，支持点击外部链接
        self.output_box = QTextBrowser(frame)
        self.output_box.setOpenExternalLinks(True)
        self.output_box.setReadOnly(True)
        self.output_box.setFrameStyle(QTextBrowser.NoFrame)
        frame_layout.addWidget(self.output_box)

        layout.addWidget(frame)

        # 检查更新按钮
        self.check_btn = QPushButton("检查更新")
        self.check_btn.clicked.connect(self.run_check)
        self.check_btn.setFixedSize(170, 33)
        btn_font = QFont("HONOR Sans CN", 11)
        btn_font.setHintingPreference(QFont.HintingPreference.PreferFullHinting)
        btn_font.setStyleStrategy(QFont.PreferAntialias)
        self.check_btn.setFont(btn_font)

        palette = QApplication.palette()
        is_dark_mode = palette.color(QPalette.Window).lightness() < 128
        disabled_color = "#182b5f" if is_dark_mode else "#acc8ff"

        self.check_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: #3773e8;
                color: white;
                border: none;
                border-radius: 16px;
                font-size: 14px;
            }}
            QPushButton:hover {{
                background-color: #3978f2;
            }}
            QPushButton:disabled {{
                background-color: {disabled_color};
            }}
        """)

        class InfoPanel(QDialog):
            def __init__(self, parent=None):
                super().__init__(parent)
                self.setWindowTitle("关于与反馈")
                self.setModal(True)
                self.setFixedSize(265, 100)

                # 保留标题栏和关闭按钮
                self.setWindowFlags(Qt.Dialog | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)

                self.setStyleSheet("""
                    QDialog {
                        background-color: palette(base);
                        border: 1px solid palette(mid);
                    }
                    QLabel {
                        font-size: 12px;
                    }
                """)

                layout = QVBoxLayout(self)
                layout.setContentsMargins(20, 20, 20, 20)
                layout.setSpacing(12)

                # 设置窗口左上角的小图标
                self.setWindowIcon(self.style().standardIcon(QStyle.SP_MessageBoxInformation))

                about_label = QLabel("版本：3.1.0\n反馈/建议：请使用 QQ 联系 HUANCHUAN\n\nCopyright © 2025 HUANCHUAN")

                layout.addWidget(about_label)

        # 在 UpdateChecker.__init__ 里替换原来的菜单逻辑
        menu_btn = QToolButton(self)
        menu_btn.setText("⋮")
        menu_btn.setFont(QFont("Arial", 20, QFont.Bold))
        menu_btn.setFixedSize(40, 40)
        menu_btn.setStyleSheet("""
            QToolButton {
                border: none;
                border-radius: 20px;
                background-color: transparent;
            }
            QToolButton:hover {
                background-color: palette(midlight);
            }
        """)

        def open_info_panel():
            panel = InfoPanel(self)
            # 居中显示
            panel.move(self.geometry().center() - panel.rect().center())
            panel.exec()

        menu_btn.clicked.connect(open_info_panel)

        # 布局：检查更新按钮居中，菜单按钮靠右
        btn_layout = QHBoxLayout()
        layout.addSpacing(4)
        btn_layout.addSpacing(menu_btn.width() + 6.5)  # 左侧空白等于右侧按钮宽度
        btn_layout.addStretch()
        btn_layout.addWidget(self.check_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(menu_btn, alignment=Qt.AlignRight)
        layout.addLayout(btn_layout)

        # 动画
        self.anim_texts = ["正在检查", "正在检查.", "正在检查..", "正在检查..."]
        self.anim_index = 0
        self.timer = QTimer(self)
        self.timer.setInterval(250)
        self.timer.timeout.connect(self.animate_button)

        # 线程通信桥
        self.bridge = UiBridge()
        self.bridge.append_html.connect(self.output_box.insertHtml)
        self.bridge.clear_text.connect(self.output_box.clear)
        self.bridge.finished.connect(self.on_finished)

        self.running = False
        self.run_check()

    def animate_button(self):
        self.check_btn.setText(self.anim_texts[self.anim_index])
        self.anim_index = (self.anim_index + 1) % len(self.anim_texts)

    def run_check(self):
        if self.running:
            return
        self.running = True
        self.check_btn.setEnabled(False)
        self.timer.start()

        t = threading.Thread(target=self.check_task, daemon=True)
        t.start()

    def on_finished(self):
        self.timer.stop()
        self.check_btn.setText("检查更新")
        self.check_btn.setEnabled(True)
        self.running = False

    def check_task(self):
        self.bridge.clear_text.emit()

        for key, info in pages.items():
            try:
                res = requests.get(info["url"], timeout=10)
                res.raise_for_status()
                soup = BeautifulSoup(res.text, "html.parser")

                tag, cls = info["selector"]
                element = soup.find(tag, class_=cls)

                if not element:
                    html = f"""
                    <div style="text-align:center; margin:10px;">
                        <img src="{os.path.abspath(icon_files[key])}" width="64" height="64"><br/>
                        <span style="font-size:14px; line-height:3px">{names[key]}</span><br/>
                        <span style="color:red;">未找到官网版本号</span>
                    </div>
                    """
                    self.bridge.append_html.emit(html)
                    continue

                latest_version_text = element.get_text(strip=True)
                version_display = clean_version(latest_version_text.split("|")[0], remove_patch=False)
                version_compare = clean_version(version_display, remove_patch=True)

                local_ver = installed_versions.get(key, "")
                local_ver_compare = clean_version(local_ver or "", remove_patch=True)

                # 版本比较 + 链接条件
                if not local_ver:
                    status_line = f"⚠️未获取到本地版本号，官网最新版本是 {version_display}"
                    link_html = ""
                elif version_tuple(local_ver_compare) == version_tuple(version_compare):
                    status_line = "✅已是最新版本"
                    link_html = ""
                elif version_tuple(local_ver_compare) < version_tuple(version_compare):
                    status_line = f"⚠️有新版本！ {local_ver} → {version_display}"
                    link_html = f'<br/><a href="{info["url"]}" style="font-size:15px;">下载链接</a>'
                else:
                    status_line = "ℹ️本地版本高于官网版本，或为测试版"
                    link_html = f'<br/><a href="{info["url"]}" style="font-size:15px;">官网链接</a>'

                html = f"""
                <div style="text-align:center; margin:8px;">
                    <br/>
                    <img src="{os.path.abspath(icon_files[key])}" width="64" height="64"><br/>
                    <span style="font-size:14px; line-height:3px;"><b>{names[key]}</b></span><br/>
                    <span style="font-size:13px; color:gray;">当前版本：{local_ver or '未知'}</span><br/>
                    <span style="font-size:13px; color:gray;">官网版本：{version_display}</span><br/>
                    <span style="font-size:14px; line-height:3px;">{status_line}</span>
                    {link_html}
                    <br/><br/>
                </div>
                """
                self.bridge.append_html.emit(html)

            except Exception as e:
                html = f"""
                <div style="text-align:center; margin:10px;">
                    <img src="{os.path.abspath(icon_files[key])}" width="64" height="64"><br/>
                    <span style="font-size:14px; line-height:3px;">{names[key]}</span><br/>
                    <span style="font-size:13px; color:gray;">当前版本：{installed_versions.get(key) or '未知'}</span><br/>
                    <span style="color:red;">检查更新失败：{e}</span><br/>
                </div>
                """
                self.bridge.append_html.emit(html)

                # 通知主线程收尾
        self.bridge.finished.emit()

if __name__ == "__main__":
    app = QApplication(sys.argv)

    # 设置全局窗口图标
    app.setWindowIcon(QIcon(resource_path("../resources/icon.png")))
    icon_files = {
        "pc_manager": resource_path("../resources/pc_manager.png"),
        "honor_workstation": resource_path("../resources/honor_workstation.png"),
        "yoyo_assistant": resource_path("../resources/yoyo_assistant.png")
    }

    # 全局字体优化
    font = QFont("HONOR Sans CN", 10)
    font.setHintingPreference(QFont.HintingPreference.PreferFullHinting)
    font.setStyleStrategy(QFont.PreferAntialias)
    app.setFont(font)

    win = UpdateChecker()
    win.show()
    sys.exit(app.exec())
